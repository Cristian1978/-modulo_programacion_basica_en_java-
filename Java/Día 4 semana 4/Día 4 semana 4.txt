Ejercicio 1)

Un número es perfecto si es igual a la suma de todos sus divisores positivos
sin incluir el propio número.
por ejemplo, el número 6 es perfecto. El tiene como divisores: 1, 2, 3 y 6
pero el 6 no se cuenta como divisor para comprobar si es perfefecto.
Si sumamos 1 + 2 + 3 = 6
Los siguientes números perfectos después del 6 son 28, 496, 8128, 33550336,
8589869056.
Realizar programa que pida por teclado un número y muestra si es perfecto o no.


package juevesclase;

import java.util.Scanner;

public class JuevesClase {
//Ejercicio número perfecto
    
    public static void main(String[] args) {
     
        int i, suma = 0, n;
        Scanner sc = new Scanner(System.in);
        System.out.println("Introduce un número: ");
        n = sc.nextInt();
        for (i = 1; i < n; i++) {  // i son los divisores. Se divide desde 1 hasta n-1                            
            if (n % i == 0) {
                suma = suma + i;   // si es divisor se suma
            }
        }
        if (suma == n) {           // si el numero es igual a la suma de sus divisores es perfecto                
            System.out.println("Perfecto");
        } else {
            System.out.println("No es perfecto");

        }
    }
}
    

2) Crear un arreglo donde el usuario indique cuantos numeros ingresa 



public class MostrarArreglo
{
	public static void main(String[] args)
	{
		int largo;

		Scanner leer = new Scanner(System.in);

		System.out.print("Ingrese la cantidad de valores a ingresar: ");
		largo = Integer.parseInt(leer.nextLine());

		String[] arreglo = new String[largo];

		for (int i = 0; i < largo; i++)
		{
			System.out.print((i + 1) + ". ");
			arreglo[i] = leer.nextLine();
		}

		System.out.println();
		System.out.println("--VALORES INGRESADOS--");

		for (int i = 0; i < largo; i++)
		{
			System.out.println((i + 1) + ". " + arreglo[i]);
		}

	}
}


3)Leer dos arreglos y calcular la suma de sus elementos (1er elemento A + 1er elemento B...) y mostrar los resultados.
/*
Leer dos arreglos y calcular la suma de sus elementos
(1er elemento A + 1er elemento B...),
almacenar las sumas en un nuevo arreglo y mostrar los resultados.
 */

public class Sumar2Arreglos
{
	public static void main(String[] args)
	{
		int largo;
		double[] arregloA;
		double[] arregloB;
		double[] sumas;

		Scanner leer = new Scanner(System.in);

		System.out.print("Ingrese la cantidad de pares de números a sumar: ");
		largo = Integer.parseInt(leer.nextLine());
		arregloA = new double[largo];
		arregloB = new double[largo];
		sumas = new double[largo];

		for (int i = 0; i < largo; i++)
		{
			System.out.print("\n> ");
			arregloA[i] = Double.parseDouble(leer.nextLine());
			System.out.print(" + ");
			arregloB[i] = Double.parseDouble(leer.nextLine());
			sumas[i] = arregloA[i] + arregloB[i];
		}

		System.out.println();
		System.out.println("--RESULTADOS--");

		for (int i = 0; i < largo; i++)
		{
			System.out.println("> " + arregloA[i] + " + " + arregloB[i] + " = " + sumas[i]);
		}

	}
} 



4)Buscar información de algoritmos de busqueda y ordenamiento


1. Busqueda binaria investigacion en grupo:

class BusquedaAlgoritmo {
    public static int buscar( int [] arreglo, int dato) {
 int inicio = 0;
 int fin = arreglo.length - 1;
 int pos;
 while (inicio <= fin) {
     pos = (inicio+fin) / 2;
     if ( arreglo[pos] == dato )
       return pos;
     else if ( arreglo[pos] < dato ) {
  inicio = pos+1;
     } else {
  fin = pos-1;
     }
 }
 return -1;
    }
}

public class BusquedaBinaria {
    public static void  main (String args[]) {
 // Llenar arreglo
 int [] edades = new int [35];
 for (int i = 0; i < edades.length ; i++)
     edades[i] = i*i ;

 // Mostrar arreglo.
 for (int i = 0; i < edades.length ; i++)
     System.out.println ( "edades["+i+"]: "+  edades[i]);

 int resultado = BusquedaAlgoritmo.buscar(edades, 9);

 if (resultado != -1) {
     System.out.println ( "Encontrado en: "+  resultado);
 } else {
     System.out.println ( "El dato no se encuentra en el arreglo, o el arreglo no estÃ¡ ordenado."  );
 }
 
    }
}


/*
Implementar un algoritmo de búsqueda u ordenamiento.
Ordenar una lista de 5 números ingresados por teclado
usando el algoritmo de ordenamiento de la burbuja.
 */

public class OrdenamientoBurbuja
{
	public static void main(String[] args)
	{
		int largo = 5;
		double temp;
		double[] datos = new double[largo];
		Scanner leer = new Scanner(System.in);

		System.out.println("Ingrese " + largo + " números: ");

		// Llenar el arreglo con números ingresados por teclado.
		for (int i = 0; i < largo; i++)
		{
			System.out.print("> ");
			datos[i] = Double.parseDouble(leer.nextLine());
		}

		// Ordenar el arreglo usando el algoritmo de la burbuja.
		for (int i = largo - 1; i >= 0; i--)
		{
			for (int j = 0; j < i; j++)
			{
				if (datos[j] > datos[j + 1])
				{
					temp = datos[j + 1];
					datos[j + 1] = datos[j];
					datos[j] = temp;
				}
			}
		}

		// Mostrar el arreglo ordenado.
		System.out.println("\nNúmeros ordenados:");

		for (int i = 0; i < largo; i++)
		{
			System.out.println("> " + datos[i]);
		}
	}
}



nota: hoy entendí como en el código se va invocando a las clases, me parece interesante como voy entendiendo
la logíca de la programación, y en el tema de la investigación, son interesantes los algorítmos de busqueda, como por ejemplo:
la busqueda de ordenamiento burbuja, que es uno de los métodos de ordenación más conocidos y uno de los primeros que aprenden los programadores. 
Consiste en comparar pares de elementos adyacentes en un array y si están desordenanos intercambiarlos hasta que estén todos ordenados.



    